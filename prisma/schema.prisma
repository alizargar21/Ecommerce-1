// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generate schema
model ProductComment {
  id             String           @id @default(uuid())
  product        Product          @relation(fields: [productId], references: [id])
  productId      String
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  text           String
  status         Int              // مثلاً 1=منتشرشده، 0=در انتظار بررسی، 2=رد شده
  openToComment  Boolean          @default(true)
  parent         ProductComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId       String?
  replies        ProductComment[] @relation("CommentReplies")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Product {
  id           String             @id @default(uuid())
  name         String
  description  String?
  categoryId   String
  category     ProductCategory    @relation(fields: [categoryId], references: [id])
  likedByUsers User[]             @relation("UserLikes")
  images       Image[]
  variants     ProductVariant[]
  comments     ProductComment[]   // ← ارتباط با کامنت‌ها
}

model User {
  id            String             @id @default(uuid())
  name          String             @unique
  email         String             @unique
  password      String
  telNumber     String
  role          String
  likedProducts Product[]          @relation("UserLikes")
  comments      ProductComment[]   // ← ارتباط با کامنت‌ها
}

model ProductCategory {
  id       String            @id @default(uuid())
  name     String            @unique
  parent   ProductCategory?  @relation("Subcategories", fields: [parentId], references: [id])
  parentId String?
  children ProductCategory[] @relation("Subcategories")

  products Product[]
}

model ProductVariant {
  id         String             @id @default(uuid())
  productId  String
  product    Product            @relation(fields: [productId], references: [id])
  price      Float
  quantity   Int
  sku        String?
  image      String?
  size       String?
  color      String
  attributes VariantAttribute[] 
}

model VariantAttribute {
  id        String         @id @default(uuid())
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  key       String
  value     String
}

model Image {
  id        String   @id @default(uuid())
  image     String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

// model ProductCategory {
//   id       String            @id @default(uuid())
//   name     String            @unique
//   parent   ProductCategory?  @relation("Subcategories", fields: [parentId], references: [id])
//   parentId String?
//   children ProductCategory[] @relation("Subcategories")

//   products Product[]
// }

// model Product {
//   id           String           @id @default(uuid())
//   name         String
//   description  String?
//   categoryId   String
//   category     ProductCategory  @relation(fields: [categoryId], references: [id])
//   likedByUsers User[]           @relation("UserLikes")
//   images       Image[]
//   variants     ProductVariant[]
// }

// model ProductVariant {
//   id         String             @id @default(uuid())
//   productId  String
//   product    Product            @relation(fields: [productId], references: [id])
//   price      Float
//   quantity   Int
//   sku        String?
//   image      String?
//   size       String?
//   color      String
//   attributes VariantAttribute[] 
// }

// model VariantAttribute {
//   id        String         @id @default(uuid())
//   variantId String
//   variant   ProductVariant @relation(fields: [variantId], references: [id])
//   key       String
//   value     String
// }

// model Image {
//   id        String   @id @default(uuid())
//   image     String
//   Product   Product? @relation(fields: [productId], references: [id])
//   productId String?
// }

// model User {
//   id            String    @id @default(uuid())
//   name          String    @unique
//   email         String    @unique
//   password      String
//   telNumber     String
//   role          String
//   comments      String[]
//   likedProducts Product[] @relation("UserLikes")
// }
